{"ast":null,"code":"/* big.js v3.1.3 https://github.com/MikeMcl/big.js/LICENCE */\n;\n\n(function (global) {\n  'use strict';\n  /*\r\n    big.js v3.1.3\r\n    A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n    https://github.com/MikeMcl/big.js/\r\n    Copyright (c) 2014 Michael Mclaughlin <M8ch88l@gmail.com>\r\n    MIT Expat Licence\r\n  */\n\n  /***************************** EDITABLE DEFAULTS ******************************/\n  // The default values below must be integers within the stated ranges.\n\n  /*\r\n   * The maximum number of decimal places of the results of operations\r\n   * involving division: div and sqrt, and pow with negative exponents.\r\n   */\n\n  var DP = 20,\n      // 0 to MAX_DP\n\n  /*\r\n   * The rounding mode used when rounding to the above decimal places.\r\n   *\r\n   * 0 Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n   * 1 To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n   * 2 To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n   * 3 Away from zero.                                  (ROUND_UP)\r\n   */\n  RM = 1,\n      // 0, 1, 2 or 3\n  // The maximum value of DP and Big.DP.\n  MAX_DP = 1E6,\n      // 0 to 1000000\n  // The maximum magnitude of the exponent argument to the pow method.\n  MAX_POWER = 1E6,\n      // 1 to 1000000\n\n  /*\r\n   * The exponent value at and beneath which toString returns exponential\r\n   * notation.\r\n   * JavaScript's Number type: -7\r\n   * -1000000 is the minimum recommended exponent value of a Big.\r\n   */\n  E_NEG = -7,\n      // 0 to -1000000\n\n  /*\r\n   * The exponent value at and above which toString returns exponential\r\n   * notation.\r\n   * JavaScript's Number type: 21\r\n   * 1000000 is the maximum recommended exponent value of a Big.\r\n   * (This limit is not enforced or checked.)\r\n   */\n  E_POS = 21,\n      // 0 to 1000000\n\n  /******************************************************************************/\n  // The shared prototype object.\n  P = {},\n      isValid = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n      Big;\n  /*\r\n   * Create and return a Big constructor.\r\n   *\r\n   */\n\n  function bigFactory() {\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\n    function Big(n) {\n      var x = this; // Enable constructor usage without new.\n\n      if (!(x instanceof Big)) {\n        return n === void 0 ? bigFactory() : new Big(n);\n      } // Duplicate.\n\n\n      if (n instanceof Big) {\n        x.s = n.s;\n        x.e = n.e;\n        x.c = n.c.slice();\n      } else {\n        parse(x, n);\n      }\n      /*\r\n       * Retain a reference to this Big constructor, and shadow\r\n       * Big.prototype.constructor which points to Object.\r\n       */\n\n\n      x.constructor = Big;\n    }\n\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.E_NEG = E_NEG;\n    Big.E_POS = E_POS;\n    return Big;\n  } // Private functions\n\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential\r\n   * notation to dp fixed decimal places or significant digits.\r\n   *\r\n   * x {Big} The Big to format.\r\n   * dp {number} Integer, 0 to MAX_DP inclusive.\r\n   * toE {number} 1 (toExponential), 2 (toPrecision) or undefined (toFixed).\r\n   */\n\n\n  function format(x, dp, toE) {\n    var Big = x.constructor,\n        // The index (normal notation) of the digit that may be rounded up.\n    i = dp - (x = new Big(x)).e,\n        c = x.c; // Round?\n\n    if (c.length > ++dp) {\n      rnd(x, i, Big.RM);\n    }\n\n    if (!c[0]) {\n      ++i;\n    } else if (toE) {\n      i = dp; // toFixed\n    } else {\n      c = x.c; // Recalculate i as x.e may have changed if value rounded up.\n\n      i = x.e + i + 1;\n    } // Append zeros?\n\n\n    for (; c.length < i; c.push(0)) {}\n\n    i = x.e;\n    /*\r\n     * toPrecision returns exponential notation if the number of\r\n     * significant digits specified is less than the number of digits\r\n     * necessary to represent the integer part of the value in normal\r\n     * notation.\r\n     */\n\n    return toE === 1 || toE && (dp <= i || i <= Big.E_NEG) ? // Exponential notation.\n    (x.s < 0 && c[0] ? '-' : '') + (c.length > 1 ? c[0] + '.' + c.join('').slice(1) : c[0]) + (i < 0 ? 'e' : 'e+') + i // Normal notation.\n    : x.toString();\n  }\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\n\n\n  function parse(x, n) {\n    var e, i, nL; // Minus zero?\n\n    if (n === 0 && 1 / n < 0) {\n      n = '-0'; // Ensure n is string and check validity.\n    } else if (!isValid.test(n += '')) {\n      throwErr(NaN);\n    } // Determine sign.\n\n\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1; // Decimal point?\n\n    if ((e = n.indexOf('.')) > -1) {\n      n = n.replace('.', '');\n    } // Exponential form?\n\n\n    if ((i = n.search(/e/i)) > 0) {\n      // Determine exponent.\n      if (e < 0) {\n        e = i;\n      }\n\n      e += +n.slice(i + 1);\n      n = n.substring(0, i);\n    } else if (e < 0) {\n      // Integer.\n      e = n.length;\n    }\n\n    nL = n.length; // Determine leading zeros.\n\n    for (i = 0; i < nL && n.charAt(i) == '0'; i++) {}\n\n    if (i == nL) {\n      // Zero.\n      x.c = [x.e = 0];\n    } else {\n      // Determine trailing zeros.\n      for (; nL > 0 && n.charAt(--nL) == '0';) {}\n\n      x.e = e - i - 1;\n      x.c = []; // Convert string to array of digits without leading/trailing zeros.\n      //for (e = 0; i <= nL; x.c[e++] = +n.charAt(i++)) {\n\n      for (; i <= nL; x.c.push(+n.charAt(i++))) {}\n    }\n\n    return x;\n  }\n  /*\r\n   * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n   * Called by div, sqrt and round.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * dp {number} Integer, 0 to MAX_DP inclusive.\r\n   * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\n\n\n  function rnd(x, dp, rm, more) {\n    var u,\n        xc = x.c,\n        i = x.e + dp + 1;\n\n    if (rm === 1) {\n      // xc[i] is the digit after the digit that may be rounded up.\n      more = xc[i] >= 5;\n    } else if (rm === 2) {\n      more = xc[i] > 5 || xc[i] == 5 && (more || i < 0 || xc[i + 1] !== u || xc[i - 1] & 1);\n    } else if (rm === 3) {\n      more = more || xc[i] !== u || i < 0;\n    } else {\n      more = false;\n\n      if (rm !== 0) {\n        throwErr('!Big.RM!');\n      }\n    }\n\n    if (i < 1 || !xc[0]) {\n      if (more) {\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n        x.e = -dp;\n        x.c = [1];\n      } else {\n        // Zero.\n        x.c = [x.e = 0];\n      }\n    } else {\n      // Remove any digits after the required decimal places.\n      xc.length = i--; // Round up?\n\n      if (more) {\n        // Rounding up may mean the previous digit has to be rounded up.\n        for (; ++xc[i] > 9;) {\n          xc[i] = 0;\n\n          if (!i--) {\n            ++x.e;\n            xc.unshift(1);\n          }\n        }\n      } // Remove trailing zeros.\n\n\n      for (i = xc.length; !xc[--i]; xc.pop()) {}\n    }\n\n    return x;\n  }\n  /*\r\n   * Throw a BigError.\r\n   *\r\n   * message {string} The error message.\r\n   */\n\n\n  function throwErr(message) {\n    var err = new Error(message);\n    err.name = 'BigError';\n    throw err;\n  } // Prototype/instance methods\n\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\n\n\n  P.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n  };\n  /*\r\n   * Return\r\n   * 1 if the value of this Big is greater than the value of Big y,\r\n   * -1 if the value of this Big is less than the value of Big y, or\r\n   * 0 if they have the same value.\r\n  */\n\n\n  P.cmp = function (y) {\n    var xNeg,\n        x = this,\n        xc = x.c,\n        yc = (y = new x.constructor(y)).c,\n        i = x.s,\n        j = y.s,\n        k = x.e,\n        l = y.e; // Either zero?\n\n    if (!xc[0] || !yc[0]) {\n      return !xc[0] ? !yc[0] ? 0 : -j : i;\n    } // Signs differ?\n\n\n    if (i != j) {\n      return i;\n    }\n\n    xNeg = i < 0; // Compare exponents.\n\n    if (k != l) {\n      return k > l ^ xNeg ? 1 : -1;\n    }\n\n    i = -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n    for (; ++i < j;) {\n      if (xc[i] != yc[i]) {\n        return xc[i] > yc[i] ^ xNeg ? 1 : -1;\n      }\n    } // Compare lengths.\n\n\n    return k == l ? 0 : k > l ^ xNeg ? 1 : -1;\n  };\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the\r\n   * value of Big y, rounded, if necessary, to a maximum of Big.DP decimal\r\n   * places using rounding mode Big.RM.\r\n   */\n\n\n  P.div = function (y) {\n    var x = this,\n        Big = x.constructor,\n        // dividend\n    dvd = x.c,\n        //divisor\n    dvs = (y = new Big(y)).c,\n        s = x.s == y.s ? 1 : -1,\n        dp = Big.DP;\n\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n      throwErr('!Big.DP!');\n    } // Either 0?\n\n\n    if (!dvd[0] || !dvs[0]) {\n      // If both are 0, throw NaN\n      if (dvd[0] == dvs[0]) {\n        throwErr(NaN);\n      } // If dvs is 0, throw +-Infinity.\n\n\n      if (!dvs[0]) {\n        throwErr(s / 0);\n      } // dvd is 0, return +-0.\n\n\n      return new Big(s * 0);\n    }\n\n    var dvsL,\n        dvsT,\n        next,\n        cmp,\n        remI,\n        u,\n        dvsZ = dvs.slice(),\n        dvdI = dvsL = dvs.length,\n        dvdL = dvd.length,\n        // remainder\n    rem = dvd.slice(0, dvsL),\n        remL = rem.length,\n        // quotient\n    q = y,\n        qc = q.c = [],\n        qi = 0,\n        digits = dp + (q.e = x.e - y.e) + 1;\n    q.s = s;\n    s = digits < 0 ? 0 : digits; // Create version of divisor with leading zero.\n\n    dvsZ.unshift(0); // Add zeros to make remainder as long as divisor.\n\n    for (; remL++ < dvsL; rem.push(0)) {}\n\n    do {\n      // 'next' is how many times the divisor goes into current remainder.\n      for (next = 0; next < 10; next++) {\n        // Compare divisor and remainder.\n        if (dvsL != (remL = rem.length)) {\n          cmp = dvsL > remL ? 1 : -1;\n        } else {\n          for (remI = -1, cmp = 0; ++remI < dvsL;) {\n            if (dvs[remI] != rem[remI]) {\n              cmp = dvs[remI] > rem[remI] ? 1 : -1;\n              break;\n            }\n          }\n        } // If divisor < remainder, subtract divisor from remainder.\n\n\n        if (cmp < 0) {\n          // Remainder can't be more than 1 digit longer than divisor.\n          // Equalise lengths using divisor with extra leading zero?\n          for (dvsT = remL == dvsL ? dvs : dvsZ; remL;) {\n            if (rem[--remL] < dvsT[remL]) {\n              remI = remL;\n\n              for (; remI && !rem[--remI]; rem[remI] = 9) {}\n\n              --rem[remI];\n              rem[remL] += 10;\n            }\n\n            rem[remL] -= dvsT[remL];\n          }\n\n          for (; !rem[0]; rem.shift()) {}\n        } else {\n          break;\n        }\n      } // Add the 'next' digit to the result array.\n\n\n      qc[qi++] = cmp ? next : ++next; // Update the remainder.\n\n      if (rem[0] && cmp) {\n        rem[remL] = dvd[dvdI] || 0;\n      } else {\n        rem = [dvd[dvdI]];\n      }\n    } while ((dvdI++ < dvdL || rem[0] !== u) && s--); // Leading zero? Do not remove if result is simply zero (qi == 1).\n\n\n    if (!qc[0] && qi != 1) {\n      // There can't be more than one zero.\n      qc.shift();\n      q.e--;\n    } // Round?\n\n\n    if (qi > digits) {\n      rnd(q, dp, Big.RM, rem[0] !== u);\n    }\n\n    return q;\n  };\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y,\r\n   * otherwise returns false.\r\n   */\n\n\n  P.eq = function (y) {\n    return !this.cmp(y);\n  };\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y,\r\n   * otherwise returns false.\r\n   */\n\n\n  P.gt = function (y) {\n    return this.cmp(y) > 0;\n  };\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the\r\n   * value of Big y, otherwise returns false.\r\n   */\n\n\n  P.gte = function (y) {\n    return this.cmp(y) > -1;\n  };\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y,\r\n   * otherwise returns false.\r\n   */\n\n\n  P.lt = function (y) {\n    return this.cmp(y) < 0;\n  };\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value\r\n   * of Big y, otherwise returns false.\r\n   */\n\n\n  P.lte = function (y) {\n    return this.cmp(y) < 1;\n  };\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value\r\n   * of Big y.\r\n   */\n\n\n  P.sub = P.minus = function (y) {\n    var i,\n        j,\n        t,\n        xLTy,\n        x = this,\n        Big = x.constructor,\n        a = x.s,\n        b = (y = new Big(y)).s; // Signs differ?\n\n    if (a != b) {\n      y.s = -b;\n      return x.plus(y);\n    }\n\n    var xc = x.c.slice(),\n        xe = x.e,\n        yc = y.c,\n        ye = y.e; // Either zero?\n\n    if (!xc[0] || !yc[0]) {\n      // y is non-zero? x is non-zero? Or both are zero.\n      return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    } // Determine which is the bigger number.\n    // Prepend zeros to equalise exponents.\n\n\n    if (a = xe - ye) {\n      if (xLTy = a < 0) {\n        a = -a;\n        t = xc;\n      } else {\n        ye = xe;\n        t = yc;\n      }\n\n      t.reverse();\n\n      for (b = a; b--; t.push(0)) {}\n\n      t.reverse();\n    } else {\n      // Exponents equal. Check digit by digit.\n      j = ((xLTy = xc.length < yc.length) ? xc : yc).length;\n\n      for (a = b = 0; b < j; b++) {\n        if (xc[b] != yc[b]) {\n          xLTy = xc[b] < yc[b];\n          break;\n        }\n      }\n    } // x < y? Point xc to the array of the bigger number.\n\n\n    if (xLTy) {\n      t = xc;\n      xc = yc;\n      yc = t;\n      y.s = -y.s;\n    }\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter\r\n     * as subtraction only needs to start at yc.length.\r\n     */\n\n\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) {\n      for (; b--; xc[i++] = 0) {}\n    } // Subtract yc from xc.\n\n\n    for (b = i; j > a;) {\n      if (xc[--j] < yc[j]) {\n        for (i = j; i && !xc[--i]; xc[i] = 9) {}\n\n        --xc[i];\n        xc[j] += 10;\n      }\n\n      xc[j] -= yc[j];\n    } // Remove trailing zeros.\n\n\n    for (; xc[--b] === 0; xc.pop()) {} // Remove leading zeros and adjust exponent accordingly.\n\n\n    for (; xc[0] === 0;) {\n      xc.shift();\n      --ye;\n    }\n\n    if (!xc[0]) {\n      // n - n = +0\n      y.s = 1; // Result must be zero.\n\n      xc = [ye = 0];\n    }\n\n    y.c = xc;\n    y.e = ye;\n    return y;\n  };\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the\r\n   * value of Big y.\r\n   */\n\n\n  P.mod = function (y) {\n    var yGTx,\n        x = this,\n        Big = x.constructor,\n        a = x.s,\n        b = (y = new Big(y)).s;\n\n    if (!y.c[0]) {\n      throwErr(NaN);\n    }\n\n    x.s = y.s = 1;\n    yGTx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n\n    if (yGTx) {\n      return new Big(x);\n    }\n\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n  };\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value\r\n   * of Big y.\r\n   */\n\n\n  P.add = P.plus = function (y) {\n    var t,\n        x = this,\n        Big = x.constructor,\n        a = x.s,\n        b = (y = new Big(y)).s; // Signs differ?\n\n    if (a != b) {\n      y.s = -b;\n      return x.minus(y);\n    }\n\n    var xe = x.e,\n        xc = x.c,\n        ye = y.e,\n        yc = y.c; // Either zero?\n\n    if (!xc[0] || !yc[0]) {\n      // y is non-zero? x is non-zero? Or both are zero.\n      return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    }\n\n    xc = xc.slice(); // Prepend zeros to equalise exponents.\n    // Note: Faster to use reverse then do unshifts.\n\n    if (a = xe - ye) {\n      if (a > 0) {\n        ye = xe;\n        t = yc;\n      } else {\n        a = -a;\n        t = xc;\n      }\n\n      t.reverse();\n\n      for (; a--; t.push(0)) {}\n\n      t.reverse();\n    } // Point xc to the longer array.\n\n\n    if (xc.length - yc.length < 0) {\n      t = yc;\n      yc = xc;\n      xc = t;\n    }\n\n    a = yc.length;\n    /*\r\n     * Only start adding at yc.length - 1 as the further digits of xc can be\r\n     * left as they are.\r\n     */\n\n    for (b = 0; a;) {\n      b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n      xc[a] %= 10;\n    } // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n\n\n    if (b) {\n      xc.unshift(b);\n      ++ye;\n    } // Remove trailing zeros.\n\n\n    for (a = xc.length; xc[--a] === 0; xc.pop()) {}\n\n    y.c = xc;\n    y.e = ye;\n    return y;\n  };\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round, if necessary, to a maximum of Big.DP decimal\r\n   * places using rounding mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\n\n\n  P.pow = function (n) {\n    var x = this,\n        one = new x.constructor(1),\n        y = one,\n        isNeg = n < 0;\n\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\n      throwErr('!pow!');\n    }\n\n    n = isNeg ? -n : n;\n\n    for (;;) {\n      if (n & 1) {\n        y = y.times(x);\n      }\n\n      n >>= 1;\n\n      if (!n) {\n        break;\n      }\n\n      x = x.times(x);\n    }\n\n    return isNeg ? one.div(y) : y;\n  };\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a\r\n   * maximum of dp decimal places using rounding mode rm.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   * If rm is not specified, use Big.RM.\r\n   *\r\n   * [dp] {number} Integer, 0 to MAX_DP inclusive.\r\n   * [rm] 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n   */\n\n\n  P.round = function (dp, rm) {\n    var x = this,\n        Big = x.constructor;\n\n    if (dp == null) {\n      dp = 0;\n    } else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n      throwErr('!round!');\n    }\n\n    rnd(x = new Big(x), dp, rm == null ? Big.RM : rm);\n    return x;\n  };\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big,\r\n   * rounded, if necessary, to a maximum of Big.DP decimal places using\r\n   * rounding mode Big.RM.\r\n   */\n\n\n  P.sqrt = function () {\n    var estimate,\n        r,\n        approx,\n        x = this,\n        Big = x.constructor,\n        xc = x.c,\n        i = x.s,\n        e = x.e,\n        half = new Big('0.5'); // Zero?\n\n    if (!xc[0]) {\n      return new Big(x);\n    } // If negative, throw NaN.\n\n\n    if (i < 0) {\n      throwErr(NaN);\n    } // Estimate.\n\n\n    i = Math.sqrt(x.toString()); // Math.sqrt underflow/overflow?\n    // Pass x to Math.sqrt as integer, then adjust the result exponent.\n\n    if (i === 0 || i === 1 / 0) {\n      estimate = xc.join('');\n\n      if (!(estimate.length + e & 1)) {\n        estimate += '0';\n      }\n\n      r = new Big(Math.sqrt(estimate).toString());\n      r.e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n    } else {\n      r = new Big(i.toString());\n    }\n\n    i = r.e + (Big.DP += 4); // Newton-Raphson iteration.\n\n    do {\n      approx = r;\n      r = half.times(approx.plus(x.div(approx)));\n    } while (approx.c.slice(0, i).join('') !== r.c.slice(0, i).join(''));\n\n    rnd(r, Big.DP -= 4, Big.RM);\n    return r;\n  };\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of\r\n   * Big y.\r\n   */\n\n\n  P.mul = P.times = function (y) {\n    var c,\n        x = this,\n        Big = x.constructor,\n        xc = x.c,\n        yc = (y = new Big(y)).c,\n        a = xc.length,\n        b = yc.length,\n        i = x.e,\n        j = y.e; // Determine sign of result.\n\n    y.s = x.s == y.s ? 1 : -1; // Return signed 0 if either 0.\n\n    if (!xc[0] || !yc[0]) {\n      return new Big(y.s * 0);\n    } // Initialise exponent of result as x.e + y.e.\n\n\n    y.e = i + j; // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n\n    if (a < b) {\n      c = xc;\n      xc = yc;\n      yc = c;\n      j = a;\n      a = b;\n      b = j;\n    } // Initialise coefficient array of result with zeros.\n\n\n    for (c = new Array(j = a + b); j--; c[j] = 0) {} // Multiply.\n    // i is initially xc.length.\n\n\n    for (i = b; i--;) {\n      b = 0; // a is yc.length.\n\n      for (j = a + i; j > i;) {\n        // Current sum of products at this digit position, plus carry.\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\n        c[j--] = b % 10; // carry\n\n        b = b / 10 | 0;\n      }\n\n      c[j] = (c[j] + b) % 10;\n    } // Increment result exponent if there is a final carry.\n\n\n    if (b) {\n      ++y.e;\n    } // Remove any leading zero.\n\n\n    if (!c[0]) {\n      c.shift();\n    } // Remove trailing zeros.\n\n\n    for (i = c.length; !c[--i]; c.pop()) {}\n\n    y.c = c;\n    return y;\n  };\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to\r\n   * or greater than Big.E_POS, or a negative exponent equal to or less than\r\n   * Big.E_NEG.\r\n   */\n\n\n  P.toString = P.valueOf = P.toJSON = function () {\n    var x = this,\n        Big = x.constructor,\n        e = x.e,\n        str = x.c.join(''),\n        strL = str.length; // Exponential notation?\n\n    if (e <= Big.E_NEG || e >= Big.E_POS) {\n      str = str.charAt(0) + (strL > 1 ? '.' + str.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e; // Negative exponent?\n    } else if (e < 0) {\n      // Prepend zeros.\n      for (; ++e; str = '0' + str) {}\n\n      str = '0.' + str; // Positive exponent?\n    } else if (e > 0) {\n      if (++e > strL) {\n        // Append zeros.\n        for (e -= strL; e--; str += '0') {}\n      } else if (e < strL) {\n        str = str.slice(0, e) + '.' + str.slice(e);\n      } // Exponent zero.\n\n    } else if (strL > 1) {\n      str = str.charAt(0) + '.' + str.slice(1);\n    } // Avoid '-0'\n\n\n    return x.s < 0 && x.c[0] ? '-' + str : str;\n  };\n  /*\r\n   ***************************************************************************\r\n   * If toExponential, toFixed, toPrecision and format are not required they\r\n   * can safely be commented-out or deleted. No redundant code will be left.\r\n   * format is used only by toExponential, toFixed and toPrecision.\r\n   ***************************************************************************\r\n   */\n\n  /*\r\n   * Return a string representing the value of this Big in exponential\r\n   * notation to dp fixed decimal places and rounded, if necessary, using\r\n   * Big.RM.\r\n   *\r\n   * [dp] {number} Integer, 0 to MAX_DP inclusive.\r\n   */\n\n\n  P.toExponential = function (dp) {\n    if (dp == null) {\n      dp = this.c.length - 1;\n    } else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n      throwErr('!toExp!');\n    }\n\n    return format(this, dp, 1);\n  };\n  /*\r\n   * Return a string representing the value of this Big in normal notation\r\n   * to dp fixed decimal places and rounded, if necessary, using Big.RM.\r\n   *\r\n   * [dp] {number} Integer, 0 to MAX_DP inclusive.\r\n   */\n\n\n  P.toFixed = function (dp) {\n    var str,\n        x = this,\n        Big = x.constructor,\n        neg = Big.E_NEG,\n        pos = Big.E_POS; // Prevent the possibility of exponential notation.\n\n    Big.E_NEG = -(Big.E_POS = 1 / 0);\n\n    if (dp == null) {\n      str = x.toString();\n    } else if (dp === ~~dp && dp >= 0 && dp <= MAX_DP) {\n      str = format(x, x.e + dp); // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.\n      // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n\n      if (x.s < 0 && x.c[0] && str.indexOf('-') < 0) {\n        //E.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.\n        str = '-' + str;\n      }\n    }\n\n    Big.E_NEG = neg;\n    Big.E_POS = pos;\n\n    if (!str) {\n      throwErr('!toFix!');\n    }\n\n    return str;\n  };\n  /*\r\n   * Return a string representing the value of this Big rounded to sd\r\n   * significant digits using Big.RM. Use exponential notation if sd is less\r\n   * than the number of digits necessary to represent the integer part of the\r\n   * value in normal notation.\r\n   *\r\n   * sd {number} Integer, 1 to MAX_DP inclusive.\r\n   */\n\n\n  P.toPrecision = function (sd) {\n    if (sd == null) {\n      return this.toString();\n    } else if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n      throwErr('!toPre!');\n    }\n\n    return format(this, sd - 1, 2);\n  }; // Export\n\n\n  Big = bigFactory(); //AMD.\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return Big;\n    }); // Node and other CommonJS-like environments that support module.exports.\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Big;\n    module.exports.Big = Big; //Browser.\n  } else {\n    global.Big = Big;\n  }\n})(this);","map":null,"metadata":{},"sourceType":"script"}